#!/usr/bin/env ruby

require 'thor'
require 'securerandom'
require_relative '../lib/hyperledger_cli'
require_relative '../lib/hyperledger_cli/key'

include HyperledgerCli

class Asset < Thor  
  desc 'list', 'List all known assets'
  def list
    get "#{options[:server]}/assets"
  end
  
  desc 'register <hash>', 'Registers a new asset. The hash must be an unique hex encoded SHA265 hash.'
  def register(hash)
    asset_key = Key.new
    primary_account_key = Key.new
    data = {
      asset: {
        publicKey: asset_key.public_key,
        hash: hash,
        primaryAccountPublicKey: primary_account_key.public_key
      }
    }
    
    post("#{options[:server]}/assets", data, asset_key)
    
    asset_key.write
    primary_account_key.write
  end
end

class Account < Thor
  desc 'list', 'List all known accounts'
  def list
    get "#{options[:server]}/accounts"
  end
  
  desc 'register <asset>', 'Registers a new account to hold <asset>.'
  def register(asset)
    account_key = Key.new
    data = {
      account: {
        assetHash: asset,
        publicKey: account_key.public_key
      }
    }
    
    post("#{options[:server]}/accounts", data, account_key)
    
    account_key.write
  end
end

class Hyperledger < Thor
  class_option :server, type: :string, required: true
  
  desc 'asset SUBCOMMAND', 'Subcommands relating to ledgers.'
  subcommand 'asset', Asset
  
  desc 'account SUBCOMMAND', 'Subcommands relating to accounts.'
  subcommand 'account', Account
  
  desc 'issue <amount> <asset> <public key>', 'Issue <amount> new units of <asset> authorised by <public key>.'
  def issue(amount, asset, public_key)
    asset_key = Key.new(public_key)
    data = {
      issue: {
        uuid: SecureRandom.uuid,
        assetHash: asset,
        amount: amount.to_i
      }
    }
    
    post("#{options.server}/assets/#{asset}/issues", data, asset_key)
  end
  
  desc 'transfer <amount> <source> <destination>', 'Transfer <amount> of units from <source> to <destination>'
  def transfer(amount, source, destination)
    source_key = Key.new(source)
    data = {
      transfer: {
        uuid: SecureRandom.uuid,
        sourcePublicKey: source,
        destinationPublicKey: destination,
        amount: amount.to_i
      }
    }
        
    post("#{options.server}/transfers", data, source_key)
  end
end

Hyperledger.start(ARGV)
